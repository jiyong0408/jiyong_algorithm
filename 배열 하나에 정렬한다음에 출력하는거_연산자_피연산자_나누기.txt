#pragma warning(disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define SIZE 100

typedef struct _stack
{
	char operator;
	struct _stack *next;
}stack;

stack *head, *tail, *top;

//head = top, tail = bottom;
void init_stack_head_top()
{
	head = (stack*)calloc(1, sizeof(stack));
	tail = (stack*)calloc(1, sizeof(stack));
	head->next = tail;
	tail->next = tail;
	top = head->next;
}


//a를 스택의 top위치에 넣는다.
stack* push_head_top(int a)
{
	stack *temp_add;
	temp_add = (stack*)calloc(1, sizeof(stack));
	temp_add->operator = a;

	temp_add->next = head->next;
	head->next = temp_add;
	top = temp_add;
	return temp_add;
}

//top위치에 있는 자료를 빼낸다.
int pop_head_top()
{
	int key = 0;
	if (top == tail) return NULL;
	else
	{
		key = top->operator;
		head->next = top->next;
		free(top);
		top = head->next;
		return key;
	}
}

void print_stack_head_top()
{
	printf("현재 스택은 : ");

	while (1)
	{
		if (top == tail)
		{
			printf("the stack is clear");
			break;
		}
		else
		{
			printf("%d ", pop_head_top());
		}
	}
}
//스택을 비워줍니다.
void clear_stack()
{
	while (top != tail)
	{
		head->next = top->next;
		free(top);
		top = head->next;
	}
	printf("스택을 비웠습니다.");
}

//buffer를 입력받아서 연산자는 먼저 저장하고 피연산자는 나중에 저장하도록 new_buffer에 옮기는 함수
void operator_stack(char *buffer, char *new_buffer)
{
	while (*buffer)
	{
		if (*buffer == ')')
		{
			*new_buffer++ = pop_head_top();
			*new_buffer++ = ' ';
			buffer++;

		}
		else if (*buffer == '+' || *buffer == '-' || *buffer == '*' || *buffer == '/')
		{
			push_head_top(*buffer++);
		}
		else if (*buffer >= '0' && *buffer <= '9')
		{
			*new_buffer++ = *buffer++;
			*new_buffer++ = ' ';
		}
		else
		{
			buffer++;
		}
	}
}

void main()
{
	init_stack_head_top();
	char buffer[SIZE] = { 0, };
	char new_buffer[SIZE] = { 0, };

	gets(buffer);
	operator_stack(&buffer, &new_buffer);
	int i = 0;
	while (new_buffer[i] != '\0')
	{
		printf("%c ", new_buffer[i]);
		i++;
	}
}

