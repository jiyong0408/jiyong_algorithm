#pragma warning(disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//몇개를 랜덤으로 트리를 만들지
#define SIZE 20

typedef struct _node {
	char key;
	struct _node *left;
	struct _node *right;
}node;

node *stack_delete[SIZE];
node *stack[SIZE];
node *stack_visit[SIZE];
int top = -1;


int visit_check(node *t);
void visit(node *t);
node* pop();
void push(node* t);
node *head, *tail;
void init_node();
int compare_char(const void* a, const void *b);
node* insert_key_tree(char key, size_t *leaves, int comp(const void *a, const void *b));
void random_char_insert(size_t N, size_t leaves, int comp(const void *a, const void *b));
void print_inordered_search(node *t);
void delete_nodes();

void main()
{
	srand(time(NULL));
	//nodes
	size_t num = 0;
	init_node();

	random_char_insert(SIZE,num,compare_char);
	
	print_inordered_search(head->left);

	delete_nodes();
	free(head);
	free(tail);
}


int compare_char(const void* a, const void *b)
{
	return *(char*)a - *(char*)b;
}

void init_node()
{
	head = (node*)calloc(1, sizeof(node));
	tail = (node*)calloc(1, sizeof(node));
	tail->left = NULL;
	tail->right = NULL;
	head->left = tail;
	head->right = tail;
}
//왼쪽은 작고 가운데는 중간값 오른쪽은 큰거 계속 생성하도록 
node* insert_key_tree(char key, size_t *leaves, int comp(const void *a, const void *b))
{
	node *temp;
	//이번 노드를 어디에 넣을지 봐주는 포인터
	temp = (node*)calloc(1, sizeof(node));
	node *temp_search = temp;
	temp->key = key;
	if (*leaves == 0)
	{
		head->left = temp;
		head->right = temp;
		temp->left = tail;
		temp->right = tail;
		++*leaves;
		return temp;
	}
	else
	{
		temp_search = head->left;
		while (1)
		{
			if (temp_search == tail) break;
			if (comp(&(temp_search->key), &key) > 0)
			{
				if (temp_search->left == tail)
				{
					temp_search->left = temp;
					temp->left = tail;
					temp->right = tail;
					++*leaves;
					return temp;
				}
				else temp_search = temp_search->left;
			}
			else if (comp(&(temp_search->key), &key) < 0)
			{
				if (temp_search->right == tail)
				{
					temp_search->right = temp;
					temp->left = tail;
					temp->right = tail;
					++*leaves;
					return temp;
				}
				else temp_search = temp_search->right;
			}
			//중복된게 들어왔다면
			else
			{
				free(temp);
				return NULL;
			}
		}
	}
}

void random_char_insert(size_t N, size_t leaves, int comp(const void *a, const void *b))
{
	//65~90
	int random = 0, i = 0;
	while (1)
	{
		if (i == N) break;
		random = rand() % 25 + 66;
		stack_delete[i]	= insert_key_tree(random, &leaves, comp);
		if(stack_delete[i] != NULL) i++;
	}
}

node* pop()
{
	if(top > -1) return stack[top--];
	else return NULL;
}

void push(node* t)
{
	if (top < SIZE) stack[++top] = t;
}

//head->left or right를 넣고 왼 가 오 순으로 출력
void print_inordered_search(node *t)
{
	int i = 0;
	while (1)
	{
		if (t->left != tail && visit_check(t->left))
		{
			push(t);
			t = t->left;
		}
		else if ((t->left == tail || !visit_check(t->left)) && t->right != tail)
		{
			visit(t);
			stack_visit[i++] = t;
			t = t->right;
		}
		else
		{
			visit(t);
			stack_visit[i++] = t;
			if (top < 0) break;
			t = pop();
		}
		
	}
}

void visit(node *t)
{
	printf("%c ", t->key);
}
//방문 했던 노드면 0을 리턴 방문 안했다면 가야하니까 1을 리턴
int visit_check(node *t)
{
	int i = 0;
	for (i; i < SIZE; i++)
	{
		if (t == stack_visit[i])
		{
			return 0;
		}
	}
	return 1;
}

void delete_nodes()
{
	for (int i = 0; i < SIZE; i++) free(stack_delete[i]);
}