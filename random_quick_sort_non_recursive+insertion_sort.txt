#pragma warning(disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 20

int stack1[SIZE] = { 0, };
int stack2[SIZE] = { 0, };
int stack_for_push_pop[SIZE] = { 0, };
int top = -1;

void make_random_array(int stack[SIZE]);
void quick_sort_recursion(int *array, int N);
void print_array(int array[SIZE]);
int sorting_check(int array[SIZE]);
void init_stack();
void push(int key);
int pop();
void random_quick_sort_non_recursive_and_insertion_sort(int *array, int N);
void insertion_sort(int *array, int N);


void main()
{
	init_stack();
	srand(time(NULL));
	make_random_array(&stack1);
	printf("정렬전 : ");
	print_array(&stack1);
	printf("\n");
	quick_sort_recursion(&stack1, SIZE);
	printf("정렬후 : ");
	print_array(&stack1);
	printf("\n");

	make_random_array(&stack2);
	printf("정렬전 : ");
	print_array(&stack2);
	printf("\n");
	random_quick_sort_non_recursive_and_insertion_sort(&stack2, SIZE);
	//insertion_sort(&stack2, SIZE);
	printf("정렬후 : "); 
	print_array(&stack2);
	printf("\n");

}

//정렬이 안된 배열을 입력으로 받는다. 2개의 인덱스를 사용한다. 하나는 큰값을 찾는 인덱스, 다른 하나는 작은 값을 찾는 인덱스이다.
//둘중 하나의 인덱스 위치 배열에서 위 조건을 만족하는 값이 발견되면 그 인덱스는 스탑 반대쪽 인덱스를 계속 감소 또는 증가 시키다가
//두 조건을 만족하는 값이 2개 발견되면 서로의 위치를 바꿔준다. 만약 발견되지 않고 계속 감소 혹은 증가 하다가 i와 j가 같아지는 
//배열의 인덱스에서 피벗의 값과 그 인덱스의 값을 교환해준다. 그 후 인덱스를 기준으로 왼편, 오른편으로 나눠서 함수를 재귀적으로 호출한다.
void quick_sort_recursion(int *array, int N)
{
	if (N > 1)
	{
		int pivot = array[N - 1];
		int j = N - 2;
		int i = 0;

		while (1)
		{
			if (array[i] < pivot)
			{
				i++;
			}
			if (array[j] > pivot)
			{
				j--;
			}
			//i와 j의 위치가 바뀌는데도 while문을 탈출하지않으면 i가 j의 영역에서 혹은 j가 i의 영역에서 가지는 값으로 서로 위치를 바꾸게되서
			//i와 j로 나눠서 정렬을 하는게 의미가 사라진다. 이 현상이 밑에 temp로 위치를 바꾸는 짓을 한뒤에 일어나는 경우가 많다. 이를 방지하기위해 여기다가 
			//break문을 써서 바로 조건을 만족하면 while문을 더이상 돌지않게 해준다.
			if (i > j) break;
			if (array[i] > pivot && array[j] < pivot)
			{
				int temp = array[j];
				array[j] = array[i];
				array[i] = temp;
				i++;
				j--;
			}
		}

		array[N - 1] = array[i];
		array[i] = pivot;
		
		quick_sort_recursion(array, i);
		//배열을 인자로 쓰면 첫주소를 줄수있는데 배열을 사용하는 함수에서 주어진 첫 주소부터 배열 공간을 할당한다.
		quick_sort_recursion(array + i + 1, N - i - 1);
	}
}

void random_quick_sort_non_recursive_and_insertion_sort(int *array, int N)
{
	//i = Left , j = Right
	int temp = 0;
	push(0);
	push(N - 1);

	while (1)
	{
		if (top < 0) break;
		int R = pop();
		int L = pop();
		if (R - L + 1 > 5)
		{
			int random = (rand() % (R - L + 1)) + L;
			int pivot = array[random];
			array[random] = array[R];
			array[R] = pivot;
			int i = L;
			int j = R - 1;


			while (1)
			{
				if (array[i] < pivot) i++;
				if (array[j] > pivot) j--;

				if (i > j)
				{
					array[R] = array[i];
					array[i] = pivot;

					push(L);
					push(i - 1);

					push(i + 1);
					push(R);
					break;
				}

				if (array[i] > pivot && array[j] < pivot)
				{
					temp = array[i];
					array[i] = array[j];
					array[j] = temp;
					i++;
					j--;
				}
			}
		}
		else
		{
			insertion_sort(array + L, R - L + 1);
		}
	}
}

//배열의 모든요소를 자기보다 작은게 앞에오고 자기보다 큰게 뒤에오도록 맨 앞에서부터 차례대로 비교하며 정렬한다.
//1.recursion -> break : 항수가 N이 될때 종료 -> 초기 입력 array첫 주소, 항수 해야겠다 -> 조건을 잡기가 어렵다.
//2. non_recursive -> 입력 : array첫주소 , 항수 -> i를 N - 1까지 증가시켜서 모든 항을 검사 ->
void insertion_sort(int *array, int N)
{
	int i = 0;
	int j;
	int temp = 0;
	while (1)
	{
		if (i > N - 1) break;
		j = 0;

		while (1)
		{
			if (j >= i) break;
			if (array[j] > array[i])
			{
				temp = array[i];
				array[i] = array[j];
				array[j] = temp;
			}
			j++;
		}
		i++;		
	}
}

void init_stack()
{
	top = -1;
}

void push(int key)
{
	stack_for_push_pop[++top] = key;
}

int pop()
{
	return stack_for_push_pop[top--];
}


void make_random_array(int stack[SIZE])
{
	int done = 1;
	int i = 0;
	while (done)
	{
		if (i == SIZE) done = 0;
		else
		{
			int j = 0;
			int number = (rand() % SIZE) + 1;
			int same_check = 0;

			for (j; j <= i; j++)
			{
				if (stack[j] == number) same_check = 1;
			}
			if (same_check == 0)
			{
				stack[i] = number;
				i++;
			}
		}
	}
}

void print_array(int array[SIZE])
{
	for (int i = 0; i < SIZE; i++)
	{
		printf("%d ", array[i]);
	}
}

//정렬이 끝났는지 체크해준다.
int sorting_check(int array[SIZE])
{
	int check = 0;
	for (int i = 0; i < SIZE; i++)
	{
		//순서에 어긋난게 발견됬다 -> check = 1
		if (array[i] < array[i + 1]) check = 1;
	}
	if (check == 1) return 0;
	else return 1;
}