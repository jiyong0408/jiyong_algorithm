#pragma warning(disable:4996)
#include <stdio.h>
#include <stdlib.h>
#define SIZE 100
typedef struct _node {
	char key;
	struct _node *left;
	struct _node *right;
}node;

//level_order_traverse를 하기위해 사용하는 큐: 노드의 주소를 잠시 보관
typedef struct _queue {
	node *node_address;
	struct _queue *prev;
	struct _queue *next;
}queue;

int start_flag = 0;
top = -1;
int visit_number = 0;
node *tree_search_stack[100] = { 0, };
node *head_node, *tail_node;
int visit_check(node *);
void post_order_search(node *);
char visit_nodes[100] = { 0, };
void push(node*);
node* pop();
void preordered_search(node *);
void inordered_search(node *);
void add_tree(char);
queue *head_queue, *tail_queue, *front, *rear;
void init_tree();
void level_order_search(node *);
void init_queue();
//이번 트리의 생성 위치를 가리킨다.
node* position_node;
void delete_queue();

void main()
{
	//트리를 생성한다.
	init_tree();
	init_queue();
	//문자 하나를 입력받는 것 마지막에 줄바꿈은 받지않고
	add_tree('B');
	add_tree('C');
	add_tree('D');
	add_tree('E');
	add_tree('F');
	add_tree('G');
	init_queue();
	level_order_search(head_node);
}

void init_queue()
{
	head_queue = (queue*)calloc(1, sizeof(queue));
	tail_queue = (queue*)calloc(1, sizeof(queue));
	head_queue->next = tail_queue;
	head_queue->prev = head_queue;
	tail_queue->next = tail_queue;
	tail_queue->prev = head_queue;
	rear = tail_queue->prev;
	front = head_queue->next;
}

//모든 큐를 지운다.
void delete_queue()
{
	queue *temp_delete;
	temp_delete = head_queue->next;
	while (1)
	{
		if (temp_delete == tail_queue) break;
		free(temp_delete);
		temp_delete = temp_delete->next;
	}
	head_queue->next = tail_queue;
	tail_queue->prev = head_queue;
}

queue* put(node* node)
{
	if (node == tail_queue) return NULL;
	queue* temp_add;
	temp_add = (queue*)calloc(1, sizeof(queue));
	temp_add->node_address = node;
	temp_add->next = tail_queue;
	tail_queue->prev = temp_add;
	temp_add->prev = rear;
	rear->next = temp_add;
	rear = temp_add;
	front = head_queue->next;
	return temp_add;
}

node* get()
{
	node* temp_return;
	queue* temp_delete;
	temp_delete = front;
	if (temp_delete == tail_queue) return NULL;
	temp_return = front->node_address;
	front->next->prev = head_queue;
	head_queue->next = front->next;
	front = front->next;
	free(temp_delete);
	rear = tail_queue->prev;
	return temp_return;
}

void push(node* node)
{
	if (top > SIZE - 1) return NULL;
	tree_search_stack[++top] = node;
}

node* pop()
{
	if (top == - 1) return NULL;
	return tree_search_stack[top--];
}

void visit(node* node)
{
	printf("%c", node->key);
}

void level_order_search(node *node)
{
	if (node != tail_node)
	{
		while (1)
		{
			if(front != tail_queue) node = get();
			visit(node);

			if (node->left != tail_node)
			{
				put(node->left);
			}
		    //else if하면 안됨
			if (node->right != tail_node)
			{
				put(node->right);
			}
			if (front == tail_queue) break;
		}
	}
}

void post_order_search(node *root)
{
	if (root != tail_node)
	{
		while (1)
		{
			if (root->left != tail_node && visit_check(root->left->key))
			{
				push(root);
				root = root->left;
			}
			else if (root->right != tail_node && visit_check(root->right->key))
			{
				push(root);
				root = root->right;
			}
			else
			{
				visit(root);
				visit_nodes[visit_number++] = root->key;
				if (top == -1) break;
				root = pop();
			}
		}
	}
}

//부모 방문->자식이 있다면 자식 스택에 넣음(왼쪽부터 방문하니까 오른쪽 자식부터 넣음)->
//부모노드에 pop값을 대입->자식이 없을때 까지 반복->자식이 없다 ->부모노드에 팝값을 대입
void preordered_search(node *root)
{
	node *temp = root;
	if (root != tail_node)
	{
		while (1)
		{
			if (temp->left == tail_node && temp->right == tail_node)
			{
				visit(temp);
				if (top == -1) break;
				temp = pop();
			}
			else
			{
				if (temp->right != tail_node) push(temp->right);
				if (temp->left != tail_node) push(temp->left);
				visit(temp);
				temp = pop();
			}
		}
	}
}

//자식이 있고 왼쪽 노드를 방문을 안했다면 노드에 왼쪽 노드를 대입(자식이 없을때 까지)->방문->노드에 pop()을 대입->
//자식이 있고 왼쪽노드를 방문했다면 오른쪽 노드를 방문-> 노드에 pop()을 대입
void inordered_search(node *root)
{
	if (root != tail_node)
	{
		while (1)
		{
			if (root->left != tail_node && visit_check(root->left->key))
			{
				push(root);
				root = root->left;
			}
			else if (root->right != tail_node)
			{
				visit(root);
				visit_nodes[visit_number++] = root->key;
				root = root->right;
			}
			else
			{
				visit(root);
				visit_nodes[visit_number++] = root->key;
				if (top == -1) break;
				root = pop();
			}
		}
	}
}

//방문한 노드중에 지금 방문한 노드의 왼쪽자식이 있는지 체크해주는 함수
int visit_check(char key)
{
	//여기가 뭔가 문제있다.
	int i = 0;
	while (i <= visit_number)
	{
		if (key == visit_nodes[i]) return 0;
		i++;
	}
	return 1;
}

void init_tree()
{
	head_node = (node*)calloc(1, sizeof(node));
	tail_node = (node*)calloc(1, sizeof(node));
	head_node->key = 'A';
	head_node->left = tail_node;
	head_node->right = tail_node;
	tail_node->left = tail_node;
	tail_node->right = tail_node;
	position_node = head_node;
}

//왼쪽부터 차례대로 트리를 채우는 함수
void add_tree(char key)
{
	node *temp;
	node *temp_next;
	temp = (node*)calloc(1, sizeof(node));
	temp->key = key;
	temp->left = tail_node;
	temp->right = tail_node;

	if(front->next != tail_queue && position_node->left != tail_node && position_node->right != tail_node) position_node = get();
	if (position_node->left == tail_node)
	{
		position_node->left = temp;
		temp_next = position_node->left;
		put(temp_next);
	}
	else if (position_node->right == tail_node)
	{
		position_node->right = temp;
		temp_next = position_node->right;
		put(temp_next);
	}
}
