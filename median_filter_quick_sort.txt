#pragma warning(disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
//int형의 타입을 처리한다. Test = 1 char 형은 Test = 2
#define test 1
//가로세로 첫줄 빼자 프린트하기 복잡해짐
#define Dimension 3
#define X 21
#define Y 21
#define SIZE 4

int top = -1;
int stack[Dimension*Dimension] = { 0, };
int compare_int(const void* a, const void* b);
void median_filtering_quick_sort(void * base, void* filtered_base, size_t width, size_t height, size_t size_data, size_t dimension, int compare(const void* a, const void *b));
void filling_random_value(void* base, size_t size_data, size_t width, size_t height);
void print_values(void *base, size_t size, size_t width, size_t height, size_t partition);
void quick_sort(void *base, size_t size_data, size_t dimension, int compare(const void* a, const void *b));
void push(int a);
int pop();
//1. 랜덤한 값(1~20)을 가지는 44 * 44의 배열을 만들자.(인덱스 1~45까지)
//2. D -> height/ D - > width 
int main()
{
	//not (time)
	srand(time(NULL));
	int* noise_data = (int*)calloc((X)*(Y), sizeof(int));
	int* filtered_data = (int*)calloc((X)*(Y), sizeof(int));
	filling_random_value(noise_data, SIZE, X, Y);

	print_values(noise_data, SIZE, X, Y, 4);

	printf("\n");
	printf("\n");
	printf("필터링 후 ");
	printf("\n");
	median_filtering_quick_sort(noise_data, filtered_data, X, Y, SIZE, Dimension, compare_int);
	print_values(filtered_data, SIZE, X, Y, 4);

	free(noise_data);
	free(filtered_data);

	return 0;
}

void filling_random_value(void* base, size_t size_data, size_t width, size_t height)
{
	int x, y;
	int random;

	for (y = 1; y < height; y++)
	{
		for (x = 1; x < width; x++)
		{
			random = (rand() % 20) + 1;
			memcpy((char*)base + (y * width + x) * size_data, &random, size_data);
		}
	}
}
//1. D*D사이즈의 filter용 통을 만든다.
//2. x,y를 D부터 width, height까지 돌린다.
//3. filter_x, filter_y를 노이즈 데이터의 시작점에서부터 시작해서 끝점 - D + 1까지 D갯수만큼 돌린다.
//4. 이때 filter_x, filter_y의 시작점은 크게 도는 x가 1씩 증가할때마다 같이 1씩 증가한다. filter_y의 시작점도 크게도는 y와 마찬가지로 같이 증감을 한다.
//5. 이 D*D의 배열의 원소들에 대해 정렬을 한다.
//6. 정렬은 quick_sort, heap_sort를 수행한다.

void median_filtering_quick_sort(void * base, void* filtered_base, size_t width, size_t height, size_t size_data, size_t dimension, int compare(const void* a, const void *b))
{
	int x, y;
	int filter_x, filter_y;
	int *temp_for_filter;
	void *temp_mean;
	temp_mean = malloc(size_data);
	temp_for_filter = (int*)calloc(dimension*dimension, sizeof(int));

	for (y = dimension; y < height; y++)
	{
		for (x = dimension; x < width; x++)
		{
			int i = 0;
			filter_y = y - dimension + 1;
			int filter_y_limit = filter_y + dimension - 1;
			filter_x = x - dimension + 1;
			int filter_x_limit = filter_x + dimension - 1;

			for (filter_y = y - dimension + 1; filter_y <= filter_y_limit; filter_y++)
			{
				for (filter_x = x - dimension + 1; filter_x <= filter_x_limit; filter_x++)
				{
					memcpy((int*)temp_for_filter + i, (char*)base + (filter_y * width + filter_x)*size_data, size_data);
					i++;
				}
			}
			//temp_for_filter -> 5 0 0 0 4 0 0 0 ...
		//	printf("현재 배열상태 : ");
		//	for (int k = 0; k < 9; k++)
		//	{
				//(char*)temp_for_filter -> k *(sizeof(char)) * size_data -> 5 4 ...
		//		printf("%d ", *((char*)temp_for_filter + k * size_data));
		//	}
			i = 0;
			quick_sort(temp_for_filter, size_data, dimension, compare_int);
			//	printf("현재 배열상태 : ");
			//	for (int k = 0; k < 9; k++)
			//	{
					//(char*)temp_for_filter -> k *(sizeof(char)) * size_data -> 5 4 ...
			//		printf("%d ", *((char*)temp_for_filter + k * size_data));
			//	}
			memcpy(temp_mean, (int*)temp_for_filter + (dimension* dimension / 2), size_data);
			//윗문장과 같음	memcpy(temp_mean, (char*)temp_for_filter + ((dimension* dimension / 2) + 1) * size_data, size_data);

			filter_y = y - dimension + 1;
			filter_x = x - dimension + 1;

			for (filter_y = y - dimension + 1; filter_y <= filter_y_limit; filter_y++)
			{
				for (filter_x = x - dimension + 1; filter_x <= filter_x_limit; filter_x++)
				{
					memcpy((char*)filtered_base + (filter_y * width + filter_x)*size_data, temp_mean, size_data);
				}
			}
		}
	}
	free(temp_mean);
	free(temp_for_filter);
}

void print_values(void *base, size_t size, size_t width, size_t height, size_t partition)
{
	for (int y = 1; y < height; y++)
	{
		for (int x = 1; x < width; x++)
		{
			printf("%d ", *((char*)base + (y * width + x) * size));
		}
		printf("\n");
	}
}
//random pivot을 사용한다.
//0- D*D-1의 크기의 공간에대해 정렬을한다.
void quick_sort(void *base, size_t size_data, size_t dimension, int compare(const void* a, const void *b))
{
	void *temp;
	void *pivot;
	temp = malloc(size_data);
	pivot = malloc(size_data);
	int random, L, R;
	L = 0;
	R = dimension * dimension - 1;
	if (dimension*dimension > 2)
	{
		push(L);
		push(R);
		while (1)
		{
			if (top < 0) break;
			R = pop();
			L = pop();

			int i = L;
			int j = R - 1;
			if (R - L > 0)
			{
				random = rand() % (R - L) + L;
				memcpy(temp, (char*)base + R * size_data, size_data);
				memcpy((char*)base + R * size_data, (char*)base + random * size_data, size_data);
				memcpy(pivot, (char*)base + random * size_data, size_data);
				memcpy((char*)base + random * size_data, temp, size_data);

				while (1)
				{
					if (compare((char*)base + i * size_data, pivot) < 0) i++;
					if (compare((char*)base + j * size_data, pivot) > 0) j--;
					if (i > j)
					{
						memcpy((char*)base + R * size_data, (char*)base + i * size_data, size_data);
						memcpy((char*)base + i * size_data, pivot, size_data);
						push(L);
						push(i - 1);
						push(i + 1);
						push(R);
						break;
					}
					else if ((compare((char*)base + i * size_data, pivot) >= 0) && (compare((char*)base + j * size_data, pivot) <= 0))
					{
						memcpy(temp, (char*)base + i * size_data, size_data);
						memcpy((char*)base + i * size_data, (char*)base + j * size_data, size_data);
						memcpy((char*)base + j * size_data, temp, size_data);
						i++;
						j--;
					}
				}
			}
		}
	}
	free(pivot);
	free(temp);
}

//0보다 크면 앞에 있는게 크고 0보다 작으면 뒤에 있는게 더 크다.
int compare_int(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;
}

void push(int a)
{
	stack[++top] = a;
}

int pop()
{
	return stack[top--];
}