#pragma warning(disable:4996)
#pragma once
#define SIZE 100
#include <stdio.h>
#include <stdio.h>


typedef struct _node
{
	char key;
	struct _node *right;
	struct _node *left;
}node;

typedef struct _stack
{
	node *node;
	struct _stack *next;
}stack;


void inordered_search(node *root);
void preordered_search(node *root);
int visit_check(node* key);
void visit(char key);
int _top = -1;
node *tree_search_stack[100] = { 0, };
node* visit_nodes[100] = { 0, };
int visit_number = 0;
char buffer[SIZE] = { 0, };
node* post_fix_tree(char *str, node *node);
node* pop_node();
stack* push_node(node*);
void push(node*);
node* pop();
void init_stack();
void init_tree();
int Is_Not_op(char);
node* add_tree(node* op1, node *op2, char a);
stack *head_stack, *tail_stack, *top;
node *head_node, *tail_node;
void post_order_search(node *root);
node* char_to_node(char a);

void main()
{
	init_tree();
	init_stack();
	while (1)
	{
		printf("input postfix : ? ");
		gets(buffer);
		if (*buffer == NULL) break;
		printf("post_order : ");
		post_order_search(post_fix_tree(buffer, head_node));
		printf("\n");

		printf("pre_order : ");
		preordered_search(post_fix_tree(buffer, head_node));
		printf("\n");

		printf("in_order : ");
		inordered_search(post_fix_tree(buffer, head_node));
		printf("\n");
	}
}

void visit(char key)
{
	printf("%c", key);
}

void push(node* node)
{
	if (_top > SIZE - 1) return NULL;
	tree_search_stack[++_top] = node;
}

node* pop()
{
	if (_top == -1) return NULL;
	return tree_search_stack[_top--];
}

//입력 문자가 사칙연산이 아니면 1을 리턴하는 함수
int Is_Not_op(char a)
{
	if (a == '+' || a == '-' || a == '*' || a == '/') return 0;
	else return 1;
}

//stack의 op_node에 저장되는것 : 2개의 잎(피연산자)+ 뿌리(연산자)로 이루어진 트리
node* add_tree(node* op1, node *op2, char a)
{
	node *temp_add;
	temp_add = (node*)calloc(1, sizeof(node));
	temp_add->key = a;
	temp_add->left = op1;
	temp_add->right = op2;
	return temp_add;
}

int visit_check(node* key)
{
	//여기가 뭔가 문제있다.
	//같은 연산자가 2번 식에 사용되면 사용된 연산자가 다시 사용될때 방문을 한것으로 체크가 됨
	//어떤 연산자가 검색에 사용이 됬고, 그 결과 중복된 연산자가 있다는게 발견이 되면
	//그 연산자를 제거한다.
	int i = 0;
	while (i <= visit_number)
	{
		if (key == visit_nodes[i]) return 0;

		i++;
	}
	return 1;
}

void init_stack()
{
	head_stack = (stack*)calloc(1, sizeof(stack));
	tail_stack = (stack*)calloc(1, sizeof(stack));
	head_stack->next = tail_stack;
	tail_stack->next = tail_stack;
	top = head_stack;
}

void init_tree()
{
	head_node = (node*)calloc(1, sizeof(node));
	tail_node = (node*)calloc(1, sizeof(node));
	head_node->right = tail_node;
	head_node->left = tail_node;
	tail_node->left = tail_node;
	tail_node->right = tail_node;
}

//후위표기법으로 표시된 식을 입력으로 받고 부모노드는 연산자 자식은 피연산자로 이루어진
//트리를 만든다.
node* post_fix_tree(char *str, node *root)
{
	node* temp;
	while (*str)
	{
		//현재 버퍼의 인덱스에서 값이 연산자가 아닐때
		if (Is_Not_op(*str))
		{
			//노드로 바꾸고
			//노드를 푸시
			node* temp = char_to_node(*str++);
			push_node(temp);
		}
		else
		{
			node* temp = add_tree(pop_node(), pop_node(), *str++);
			push_node(temp);
		}
	}
	return pop_node();
}

node* pop_node()
{
	if (top == tail_stack) return NULL;
	node* temp_node;
	temp_node = top->node;
	head_stack->next = head_stack->next->next;
	free(top);
	top = head_stack->next;
	return temp_node;
}

node* char_to_node(char a)
{
	node *temp_node_add;
	temp_node_add = (node*)calloc(1, sizeof(node));

	temp_node_add->key = a;
	temp_node_add->left = tail_node;
	temp_node_add->right = tail_node;
	return temp_node_add;
}


stack* push_node(node* temp)
{
	stack* temp_stack_add;
	temp_stack_add = (stack*)calloc(1, sizeof(stack));
	temp_stack_add->node = temp;
	temp_stack_add->next = head_stack->next;
	head_stack->next = temp_stack_add;
	top = head_stack->next;

	return temp_stack_add;
}

void post_order_search(node *root)
{
	if (root != tail_node)
	{
		while (1)
		{
			if (root->left != tail_node && visit_check(root->left))
			{
				push(root);
				root = root->left;
			}
			else if (root->right != tail_node && visit_check(root->right))
			{
				push(root);
				root = root->right;
			}
			else
			{
				visit(root->key);
				visit_nodes[visit_number++] = root;
				if (_top == -1) break;
				root = pop();
			}
		}
	}
}

void preordered_search(node *root)
{
	node *temp = root;
	if (root != tail_node)
	{
		while (1)
		{
			if (temp->left == tail_node && temp->right == tail_node)
			{
				visit(temp->key);
				if (_top == -1) break;
				temp = pop();
			}
			else
			{
				if (temp->right != tail_node) push(temp->right);
				if (temp->left != tail_node) push(temp->left);
				visit(temp->key);
				temp = pop();
			}
		}
	}
}

int flag = 0;
int parenthesis_count = 0;

void inordered_search(node *root)
{
	if (root != tail_node)
	{
		while (1)
		{
			if (root->left != tail_node && visit_check(root->left))
			{
				if (!Is_Not_op(root->key))
				{
					printf("(");
					parenthesis_count++;
				}
				push(root);
				root = root->left;
			}
			else if (root->right != tail_node)
			{
				visit(root->key);
				visit_nodes[visit_number++] = root;
				root = root->right;

				if (Is_Not_op(root->key))
				{
					flag = 1;
				}
				else flag = 0;
			}
			else
			{
				visit(root->key);

				if (flag == 1)
				{
					printf(")");
					parenthesis_count--;
				}

				visit_nodes[visit_number++] = root;
				if (_top == -1)
				{
					while (parenthesis_count != 0)
					{
						parenthesis_count--;
						printf(")");
					}
					break;
				}
				root = pop();
			}
		}
	}
}